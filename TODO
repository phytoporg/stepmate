Make a note somewhere, these were the instructions I followed to set this all up: https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uswgi-and-nginx-on-ubuntu-18-04

NEXT:
- Client can delete a song
- Client sends banner data in a separate call?
- Web view can stream and play preview track audio
- Logins for users to create and manage lists

DONE:
- Rename this project something sensible
- Get this up on github
- Add a client codepath, endpoints for exchanging info
- Server GET endpoint to enumerate cached songs
- Client can enumerate songs w/metadata
- Client can POST to add a song on the server
- Client correctly enumerates all songs
- Song data index & search
- Some kinda test dataset for the client
- Server actually persists song data somewhere
- Response responds w/list of cached songs
- Client add can chunk songs (persisting to db for every add is super slow)
- Client can send banner data
